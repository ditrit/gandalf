// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectorEvent.proto

/*
Package connector is a generated protocol buffer package.

It is generated from these files:
	connectorEvent.proto

It has these top-level messages:
	EventMessage
	EventMessageRequest
	Empty
*/
package connector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventMessage struct {
	Topic   string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Event   string `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Payload string `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (m *EventMessage) Reset()                    { *m = EventMessage{} }
func (m *EventMessage) String() string            { return proto.CompactTextString(m) }
func (*EventMessage) ProtoMessage()               {}
func (*EventMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *EventMessage) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EventMessage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type EventMessageRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Event string `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *EventMessageRequest) Reset()                    { *m = EventMessageRequest{} }
func (m *EventMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*EventMessageRequest) ProtoMessage()               {}
func (*EventMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventMessageRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *EventMessageRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*EventMessage)(nil), "connector.EventMessage")
	proto.RegisterType((*EventMessageRequest)(nil), "connector.EventMessageRequest")
	proto.RegisterType((*Empty)(nil), "connector.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConnectorEvent service

type ConnectorEventClient interface {
	// Sends a greeting
	SendEventMessage(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*Empty, error)
	WaitEventMessage(ctx context.Context, in *EventMessageRequest, opts ...grpc.CallOption) (*EventMessage, error)
}

type connectorEventClient struct {
	cc *grpc.ClientConn
}

func NewConnectorEventClient(cc *grpc.ClientConn) ConnectorEventClient {
	return &connectorEventClient{cc}
}

func (c *connectorEventClient) SendEventMessage(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/connector.ConnectorEvent/SendEventMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorEventClient) WaitEventMessage(ctx context.Context, in *EventMessageRequest, opts ...grpc.CallOption) (*EventMessage, error) {
	out := new(EventMessage)
	err := grpc.Invoke(ctx, "/connector.ConnectorEvent/WaitEventMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConnectorEvent service

type ConnectorEventServer interface {
	// Sends a greeting
	SendEventMessage(context.Context, *EventMessage) (*Empty, error)
	WaitEventMessage(context.Context, *EventMessageRequest) (*EventMessage, error)
}

func RegisterConnectorEventServer(s *grpc.Server, srv ConnectorEventServer) {
	s.RegisterService(&_ConnectorEvent_serviceDesc, srv)
}

func _ConnectorEvent_SendEventMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorEventServer).SendEventMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.ConnectorEvent/SendEventMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorEventServer).SendEventMessage(ctx, req.(*EventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorEvent_WaitEventMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorEventServer).WaitEventMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.ConnectorEvent/WaitEventMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorEventServer).WaitEventMessage(ctx, req.(*EventMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectorEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connector.ConnectorEvent",
	HandlerType: (*ConnectorEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEventMessage",
			Handler:    _ConnectorEvent_SendEventMessage_Handler,
		},
		{
			MethodName: "WaitEventMessage",
			Handler:    _ConnectorEvent_WaitEventMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectorEvent.proto",
}

func init() { proto.RegisterFile("connectorEvent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xce, 0xcf, 0xcb,
	0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0x72, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x84, 0x8b, 0x2a, 0x85, 0x70, 0xf1, 0x80, 0x65, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3,
	0x53, 0x85, 0x44, 0xb8, 0x58, 0x4b, 0xf2, 0x0b, 0x32, 0x93, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x20, 0x1c, 0x90, 0x68, 0x2a, 0x48, 0x95, 0x04, 0x13, 0x44, 0x14, 0xcc, 0x11, 0x92, 0xe0,
	0x62, 0x2f, 0x48, 0xac, 0xcc, 0xc9, 0x4f, 0x4c, 0x91, 0x60, 0x06, 0x8b, 0xc3, 0xb8, 0x4a, 0x8e,
	0x5c, 0xc2, 0xc8, 0xa6, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x90, 0x62, 0xb8, 0x12, 0x3b,
	0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0xd1, 0x02, 0x46, 0x2e, 0x3e, 0x67, 0x14, 0x5f, 0x08,
	0xd9, 0x73, 0x09, 0x04, 0xa7, 0xe6, 0xa5, 0xa0, 0x38, 0x5c, 0x5c, 0x0f, 0xee, 0x29, 0x3d, 0x64,
	0x09, 0x29, 0x01, 0x64, 0x09, 0x90, 0x89, 0x4a, 0x0c, 0x42, 0xbe, 0x5c, 0x02, 0xe1, 0x89, 0x99,
	0x25, 0x28, 0x06, 0xc8, 0xe1, 0x30, 0x00, 0xea, 0x78, 0x29, 0x5c, 0x16, 0x28, 0x31, 0x38, 0xe9,
	0x71, 0x49, 0x65, 0xe6, 0xeb, 0xa5, 0x17, 0x15, 0x24, 0xeb, 0xa5, 0x56, 0x24, 0xe6, 0x16, 0xe4,
	0xa4, 0x16, 0x23, 0x14, 0x3b, 0x21, 0x5c, 0x1f, 0x00, 0x0a, 0xfd, 0x00, 0xc6, 0x24, 0x36, 0x70,
	0x34, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x92, 0x38, 0xbe, 0x9e, 0x01, 0x00, 0x00,
}
