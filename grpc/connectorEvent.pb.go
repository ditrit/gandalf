// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectorEvent.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventMessage struct {
	Tenant               string   `protobuf:"bytes,1,opt,name=Tenant,json=tenant,proto3" json:"Tenant,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=Topic,json=topic,proto3" json:"Topic,omitempty"`
	Timeout              string   `protobuf:"bytes,4,opt,name=Timeout,json=timeout,proto3" json:"Timeout,omitempty"`
	Timestamp            string   `protobuf:"bytes,5,opt,name=Timestamp,json=timestamp,proto3" json:"Timestamp,omitempty"`
	Uuid                 string   `protobuf:"bytes,6,opt,name=Uuid,json=uuid,proto3" json:"Uuid,omitempty"`
	Event                string   `protobuf:"bytes,7,opt,name=Event,json=event,proto3" json:"Event,omitempty"`
	Payload              string   `protobuf:"bytes,8,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventMessage) Reset()         { *m = EventMessage{} }
func (m *EventMessage) String() string { return proto.CompactTextString(m) }
func (*EventMessage) ProtoMessage()    {}
func (*EventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a15ac99c650ec24e, []int{0}
}

func (m *EventMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventMessage.Unmarshal(m, b)
}
func (m *EventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventMessage.Marshal(b, m, deterministic)
}
func (m *EventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessage.Merge(m, src)
}
func (m *EventMessage) XXX_Size() int {
	return xxx_messageInfo_EventMessage.Size(m)
}
func (m *EventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessage proto.InternalMessageInfo

func (m *EventMessage) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *EventMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *EventMessage) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *EventMessage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *EventMessage) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *EventMessage) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EventMessage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type EventMessageWait struct {
	WorkerSource         string   `protobuf:"bytes,1,opt,name=WorkerSource,json=workerSource,proto3" json:"WorkerSource,omitempty"`
	Event                string   `protobuf:"bytes,2,opt,name=Event,json=event,proto3" json:"Event,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=Topic,json=topic,proto3" json:"Topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventMessageWait) Reset()         { *m = EventMessageWait{} }
func (m *EventMessageWait) String() string { return proto.CompactTextString(m) }
func (*EventMessageWait) ProtoMessage()    {}
func (*EventMessageWait) Descriptor() ([]byte, []int) {
	return fileDescriptor_a15ac99c650ec24e, []int{1}
}

func (m *EventMessageWait) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventMessageWait.Unmarshal(m, b)
}
func (m *EventMessageWait) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventMessageWait.Marshal(b, m, deterministic)
}
func (m *EventMessageWait) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessageWait.Merge(m, src)
}
func (m *EventMessageWait) XXX_Size() int {
	return xxx_messageInfo_EventMessageWait.Size(m)
}
func (m *EventMessageWait) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessageWait.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessageWait proto.InternalMessageInfo

func (m *EventMessageWait) GetWorkerSource() string {
	if m != nil {
		return m.WorkerSource
	}
	return ""
}

func (m *EventMessageWait) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EventMessageWait) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a15ac99c650ec24e, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventMessage)(nil), "grpc.EventMessage")
	proto.RegisterType((*EventMessageWait)(nil), "grpc.EventMessageWait")
	proto.RegisterType((*Empty)(nil), "grpc.Empty")
}

func init() { proto.RegisterFile("connectorEvent.proto", fileDescriptor_a15ac99c650ec24e) }

var fileDescriptor_a15ac99c650ec24e = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x29, 0xf6, 0x47, 0xae, 0xc4, 0x90, 0x09, 0x31, 0x13, 0xe2, 0xc2, 0x74, 0xe5, 0xaa,
	0x0b, 0x8d, 0x7b, 0x83, 0x61, 0x69, 0x42, 0x04, 0xc3, 0x7a, 0x68, 0x6f, 0xc8, 0x04, 0x3a, 0x33,
	0x69, 0x6f, 0x55, 0x1e, 0xc1, 0x97, 0xf3, 0x99, 0xcc, 0xcc, 0x80, 0xb4, 0x91, 0xe5, 0xf9, 0x4e,
	0x7b, 0xcf, 0xfd, 0x19, 0x18, 0xe7, 0x5a, 0x29, 0xcc, 0x49, 0x57, 0xb3, 0x0f, 0x54, 0x94, 0x99,
	0x4a, 0x93, 0x66, 0xe1, 0xa6, 0x32, 0x79, 0xfa, 0x13, 0xc0, 0xd0, 0xd1, 0x57, 0xac, 0x6b, 0xb1,
	0x41, 0x76, 0x03, 0xf1, 0x12, 0x95, 0x50, 0xc4, 0x83, 0xbb, 0xe0, 0x7e, 0xf0, 0x16, 0x93, 0x53,
	0x6c, 0x0c, 0xd1, 0x52, 0x6f, 0x51, 0xf1, 0xbe, 0xc3, 0x11, 0x59, 0xe1, 0xa9, 0x91, 0x39, 0xbf,
	0x38, 0x52, 0x23, 0x73, 0xc6, 0x21, 0x59, 0xca, 0x12, 0x75, 0x43, 0x3c, 0x74, 0x3c, 0x21, 0x2f,
	0xd9, 0x2d, 0x0c, 0xac, 0x53, 0x93, 0x28, 0x0d, 0x8f, 0x9c, 0x37, 0xa0, 0x23, 0x60, 0x0c, 0xc2,
	0xf7, 0x46, 0x16, 0x3c, 0x76, 0x46, 0xd8, 0x34, 0xb2, 0xb0, 0x09, 0xae, 0x3f, 0x9e, 0xf8, 0x04,
	0xb4, 0xc2, 0x26, 0xcc, 0xc5, 0x7e, 0xa7, 0x45, 0xc1, 0x2f, 0x7d, 0x82, 0xf1, 0x32, 0x5d, 0xc3,
	0xa8, 0x3d, 0xcf, 0x4a, 0x48, 0x62, 0x29, 0x0c, 0x57, 0xba, 0xda, 0x62, 0xb5, 0xd0, 0x4d, 0x95,
	0xe3, 0x61, 0xb2, 0xe1, 0x67, 0x8b, 0x9d, 0x72, 0xfa, 0xed, 0x9c, 0xb3, 0xf3, 0xa5, 0x09, 0x44,
	0xb3, 0xd2, 0xd0, 0xfe, 0xe1, 0x3b, 0x80, 0xeb, 0x97, 0xce, 0x72, 0xd9, 0x13, 0x8c, 0x16, 0xa8,
	0x8a, 0xce, 0x4e, 0x59, 0x66, 0x77, 0x9d, 0xb5, 0xd9, 0xe4, 0xea, 0xc0, 0x6c, 0x9d, 0xb4, 0xc7,
	0x9e, 0x61, 0x64, 0x5b, 0xed, 0x9e, 0xe2, 0xff, 0x6f, 0xf6, 0x9b, 0xc9, 0x99, 0x72, 0x69, 0x6f,
	0x9a, 0xc1, 0x44, 0x6a, 0xef, 0xe0, 0x97, 0x28, 0xcd, 0x0e, 0xeb, 0xec, 0xef, 0xf0, 0xd3, 0x53,
	0x9b, 0x73, 0x7b, 0xfd, 0x79, 0xb0, 0x8e, 0xdd, 0x33, 0x78, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x65, 0x27, 0x02, 0x47, 0x1e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectorEventClient is the client API for ConnectorEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectorEventClient interface {
	SendEventMessage(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*Empty, error)
	WaitEventMessage(ctx context.Context, in *EventMessageWait, opts ...grpc.CallOption) (*EventMessage, error)
}

type connectorEventClient struct {
	cc *grpc.ClientConn
}

func NewConnectorEventClient(cc *grpc.ClientConn) ConnectorEventClient {
	return &connectorEventClient{cc}
}

func (c *connectorEventClient) SendEventMessage(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.ConnectorEvent/SendEventMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorEventClient) WaitEventMessage(ctx context.Context, in *EventMessageWait, opts ...grpc.CallOption) (*EventMessage, error) {
	out := new(EventMessage)
	err := c.cc.Invoke(ctx, "/grpc.ConnectorEvent/WaitEventMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorEventServer is the server API for ConnectorEvent service.
type ConnectorEventServer interface {
	SendEventMessage(context.Context, *EventMessage) (*Empty, error)
	WaitEventMessage(context.Context, *EventMessageWait) (*EventMessage, error)
}

// UnimplementedConnectorEventServer can be embedded to have forward compatible implementations.
type UnimplementedConnectorEventServer struct {
}

func (*UnimplementedConnectorEventServer) SendEventMessage(ctx context.Context, req *EventMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventMessage not implemented")
}
func (*UnimplementedConnectorEventServer) WaitEventMessage(ctx context.Context, req *EventMessageWait) (*EventMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitEventMessage not implemented")
}

func RegisterConnectorEventServer(s *grpc.Server, srv ConnectorEventServer) {
	s.RegisterService(&_ConnectorEvent_serviceDesc, srv)
}

func _ConnectorEvent_SendEventMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorEventServer).SendEventMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnectorEvent/SendEventMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorEventServer).SendEventMessage(ctx, req.(*EventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorEvent_WaitEventMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMessageWait)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorEventServer).WaitEventMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnectorEvent/WaitEventMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorEventServer).WaitEventMessage(ctx, req.(*EventMessageWait))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectorEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ConnectorEvent",
	HandlerType: (*ConnectorEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEventMessage",
			Handler:    _ConnectorEvent_SendEventMessage_Handler,
		},
		{
			MethodName: "WaitEventMessage",
			Handler:    _ConnectorEvent_WaitEventMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectorEvent.proto",
}
