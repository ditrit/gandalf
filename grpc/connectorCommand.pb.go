// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectorCommand.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandMessage struct {
	SourceAggregator      string   `protobuf:"bytes,1,opt,name=SourceAggregator,proto3" json:"SourceAggregator,omitempty"`
	SourceConnector       string   `protobuf:"bytes,2,opt,name=SourceConnector,proto3" json:"SourceConnector,omitempty"`
	SourceWorker          string   `protobuf:"bytes,3,opt,name=SourceWorker,proto3" json:"SourceWorker,omitempty"`
	DestinationAggregator string   `protobuf:"bytes,4,opt,name=DestinationAggregator,proto3" json:"DestinationAggregator,omitempty"`
	DestinationConnector  string   `protobuf:"bytes,5,opt,name=DestinationConnector,proto3" json:"DestinationConnector,omitempty"`
	DestinationWorker     string   `protobuf:"bytes,6,opt,name=DestinationWorker,proto3" json:"DestinationWorker,omitempty"`
	Tenant                string   `protobuf:"bytes,7,opt,name=Tenant,proto3" json:"Tenant,omitempty"`
	Token                 string   `protobuf:"bytes,8,opt,name=Token,proto3" json:"Token,omitempty"`
	Context               string   `protobuf:"bytes,9,opt,name=Context,proto3" json:"Context,omitempty"`
	Timeout               string   `protobuf:"bytes,10,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Timestamp             string   `protobuf:"bytes,11,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Major                 string   `protobuf:"bytes,12,opt,name=Major,proto3" json:"Major,omitempty"`
	Minor                 string   `protobuf:"bytes,13,opt,name=Minor,proto3" json:"Minor,omitempty"`
	UUID                  string   `protobuf:"bytes,14,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ConnectorType         string   `protobuf:"bytes,15,opt,name=ConnectorType,proto3" json:"ConnectorType,omitempty"`
	CommandType           string   `protobuf:"bytes,16,opt,name=CommandType,proto3" json:"CommandType,omitempty"`
	Command               string   `protobuf:"bytes,17,opt,name=Command,proto3" json:"Command,omitempty"`
	Payload               string   `protobuf:"bytes,18,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CommandMessage) Reset()         { *m = CommandMessage{} }
func (m *CommandMessage) String() string { return proto.CompactTextString(m) }
func (*CommandMessage) ProtoMessage()    {}
func (*CommandMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_84ea62e0fbc109bd, []int{0}
}

func (m *CommandMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandMessage.Unmarshal(m, b)
}
func (m *CommandMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandMessage.Marshal(b, m, deterministic)
}
func (m *CommandMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandMessage.Merge(m, src)
}
func (m *CommandMessage) XXX_Size() int {
	return xxx_messageInfo_CommandMessage.Size(m)
}
func (m *CommandMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommandMessage proto.InternalMessageInfo

func (m *CommandMessage) GetSourceAggregator() string {
	if m != nil {
		return m.SourceAggregator
	}
	return ""
}

func (m *CommandMessage) GetSourceConnector() string {
	if m != nil {
		return m.SourceConnector
	}
	return ""
}

func (m *CommandMessage) GetSourceWorker() string {
	if m != nil {
		return m.SourceWorker
	}
	return ""
}

func (m *CommandMessage) GetDestinationAggregator() string {
	if m != nil {
		return m.DestinationAggregator
	}
	return ""
}

func (m *CommandMessage) GetDestinationConnector() string {
	if m != nil {
		return m.DestinationConnector
	}
	return ""
}

func (m *CommandMessage) GetDestinationWorker() string {
	if m != nil {
		return m.DestinationWorker
	}
	return ""
}

func (m *CommandMessage) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CommandMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CommandMessage) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CommandMessage) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *CommandMessage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *CommandMessage) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *CommandMessage) GetMinor() string {
	if m != nil {
		return m.Minor
	}
	return ""
}

func (m *CommandMessage) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CommandMessage) GetConnectorType() string {
	if m != nil {
		return m.ConnectorType
	}
	return ""
}

func (m *CommandMessage) GetCommandType() string {
	if m != nil {
		return m.CommandType
	}
	return ""
}

func (m *CommandMessage) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandMessage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type CommandMessageUUID struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandMessageUUID) Reset()         { *m = CommandMessageUUID{} }
func (m *CommandMessageUUID) String() string { return proto.CompactTextString(m) }
func (*CommandMessageUUID) ProtoMessage()    {}
func (*CommandMessageUUID) Descriptor() ([]byte, []int) {
	return fileDescriptor_84ea62e0fbc109bd, []int{1}
}

func (m *CommandMessageUUID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandMessageUUID.Unmarshal(m, b)
}
func (m *CommandMessageUUID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandMessageUUID.Marshal(b, m, deterministic)
}
func (m *CommandMessageUUID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandMessageUUID.Merge(m, src)
}
func (m *CommandMessageUUID) XXX_Size() int {
	return xxx_messageInfo_CommandMessageUUID.Size(m)
}
func (m *CommandMessageUUID) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandMessageUUID.DiscardUnknown(m)
}

var xxx_messageInfo_CommandMessageUUID proto.InternalMessageInfo

func (m *CommandMessageUUID) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type CommandMessageWait struct {
	WorkerSource         string   `protobuf:"bytes,1,opt,name=WorkerSource,proto3" json:"WorkerSource,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	IteratorId           string   `protobuf:"bytes,3,opt,name=IteratorId,proto3" json:"IteratorId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandMessageWait) Reset()         { *m = CommandMessageWait{} }
func (m *CommandMessageWait) String() string { return proto.CompactTextString(m) }
func (*CommandMessageWait) ProtoMessage()    {}
func (*CommandMessageWait) Descriptor() ([]byte, []int) {
	return fileDescriptor_84ea62e0fbc109bd, []int{2}
}

func (m *CommandMessageWait) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandMessageWait.Unmarshal(m, b)
}
func (m *CommandMessageWait) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandMessageWait.Marshal(b, m, deterministic)
}
func (m *CommandMessageWait) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandMessageWait.Merge(m, src)
}
func (m *CommandMessageWait) XXX_Size() int {
	return xxx_messageInfo_CommandMessageWait.Size(m)
}
func (m *CommandMessageWait) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandMessageWait.DiscardUnknown(m)
}

var xxx_messageInfo_CommandMessageWait proto.InternalMessageInfo

func (m *CommandMessageWait) GetWorkerSource() string {
	if m != nil {
		return m.WorkerSource
	}
	return ""
}

func (m *CommandMessageWait) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CommandMessageWait) GetIteratorId() string {
	if m != nil {
		return m.IteratorId
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandMessage)(nil), "grpc.CommandMessage")
	proto.RegisterType((*CommandMessageUUID)(nil), "grpc.CommandMessageUUID")
	proto.RegisterType((*CommandMessageWait)(nil), "grpc.CommandMessageWait")
}

func init() {
	proto.RegisterFile("connectorCommand.proto", fileDescriptor_84ea62e0fbc109bd)
}

var fileDescriptor_84ea62e0fbc109bd = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xc1, 0x6b, 0xdb, 0x30,
	0x14, 0xc6, 0x9b, 0x2d, 0x4d, 0x97, 0x97, 0xb6, 0x49, 0x1f, 0x49, 0x11, 0xa1, 0x8c, 0x62, 0x76,
	0x08, 0x63, 0xf8, 0xd0, 0x0d, 0x76, 0xda, 0x61, 0x75, 0x37, 0xc8, 0xa1, 0x10, 0xd6, 0x74, 0x3d,
	0x6b, 0xb6, 0x66, 0xdc, 0xc6, 0x92, 0x51, 0x94, 0xb1, 0xfc, 0xb3, 0x83, 0xfd, 0x27, 0x45, 0x4f,
	0x72, 0x62, 0xbb, 0xbe, 0xf9, 0xfb, 0x7d, 0xdf, 0x93, 0x9e, 0xec, 0x27, 0xc3, 0x79, 0xac, 0xa4,
	0x14, 0xb1, 0x51, 0x3a, 0x52, 0x79, 0xce, 0x65, 0x12, 0x16, 0x5a, 0x19, 0x85, 0xdd, 0x54, 0x17,
	0xf1, 0x74, 0xb8, 0x73, 0x1d, 0x0e, 0xfe, 0x75, 0xe1, 0xd4, 0x07, 0x6f, 0xc5, 0x7a, 0xcd, 0x53,
	0x81, 0xef, 0x61, 0x74, 0xa7, 0x36, 0x3a, 0x16, 0x5f, 0xd3, 0x54, 0x8b, 0x94, 0x1b, 0xa5, 0x59,
	0xe7, 0xb2, 0x33, 0xeb, 0xff, 0x78, 0xc1, 0x71, 0x06, 0x43, 0xc7, 0xa2, 0x72, 0x5d, 0xf6, 0x8a,
	0xa2, 0x4d, 0x8c, 0x01, 0x1c, 0x3b, 0xf4, 0xa0, 0xf4, 0x93, 0xd0, 0xec, 0x35, 0xc5, 0x6a, 0x0c,
	0x3f, 0xc1, 0xe4, 0x46, 0xac, 0x4d, 0x26, 0xb9, 0xc9, 0x94, 0xac, 0x6c, 0xdf, 0xa5, 0x70, 0xbb,
	0x89, 0x57, 0x30, 0xae, 0x18, 0xfb, 0x46, 0x0e, 0xa9, 0xa8, 0xd5, 0xc3, 0x0f, 0x70, 0x56, 0xe1,
	0xbe, 0xa5, 0x1e, 0x15, 0xbc, 0x34, 0xf0, 0x1c, 0x7a, 0x4b, 0x21, 0xb9, 0x34, 0xec, 0x88, 0x22,
	0x5e, 0xe1, 0x18, 0x0e, 0x97, 0xea, 0x49, 0x48, 0xf6, 0x86, 0xb0, 0x13, 0xc8, 0xe0, 0x28, 0x52,
	0xd2, 0x88, 0xbf, 0x86, 0xf5, 0x89, 0x97, 0xd2, 0x3a, 0xcb, 0x2c, 0x17, 0x6a, 0x63, 0x18, 0x38,
	0xc7, 0x4b, 0xbc, 0x80, 0xbe, 0x7d, 0x5c, 0x1b, 0x9e, 0x17, 0x6c, 0x40, 0xde, 0x1e, 0xd8, 0x7d,
	0x6e, 0xf9, 0xa3, 0xd2, 0xec, 0xd8, 0xed, 0x43, 0x82, 0x68, 0x26, 0x95, 0x66, 0x27, 0x9e, 0x5a,
	0x81, 0x08, 0xdd, 0xfb, 0xfb, 0xf9, 0x0d, 0x3b, 0x25, 0x48, 0xcf, 0xf8, 0x0e, 0x4e, 0x76, 0x47,
	0x5f, 0x6e, 0x0b, 0xc1, 0x86, 0x64, 0xd6, 0x21, 0x5e, 0xc2, 0xc0, 0x4f, 0x02, 0x65, 0x46, 0x94,
	0xa9, 0x22, 0x77, 0x32, 0x92, 0xec, 0xac, 0x3c, 0x19, 0x49, 0xeb, 0x2c, 0xf8, 0x76, 0xa5, 0x78,
	0xc2, 0xd0, 0x39, 0x5e, 0x06, 0x33, 0xc0, 0xfa, 0x7c, 0x51, 0x47, 0x65, 0x97, 0x9d, 0x7d, 0x97,
	0x81, 0x6c, 0x26, 0x1f, 0x78, 0x66, 0xec, 0xdc, 0xb8, 0xaf, 0xe0, 0x26, 0xc5, 0x57, 0xd4, 0x98,
	0x7d, 0x13, 0x3f, 0xf9, 0x6a, 0x23, 0xfc, 0xec, 0x39, 0x81, 0x6f, 0x01, 0xe6, 0x46, 0x68, 0x3b,
	0x23, 0xf3, 0xc4, 0xcf, 0x5b, 0x85, 0x5c, 0xfd, 0xef, 0xc0, 0x28, 0x6a, 0x5c, 0x16, 0xfc, 0x0e,
	0x78, 0x27, 0x64, 0xd2, 0xb8, 0x12, 0xe3, 0xd0, 0xde, 0x9e, 0xb0, 0x4e, 0xa7, 0xac, 0x8d, 0xd2,
	0x51, 0x0e, 0xec, 0x3a, 0xb6, 0xfd, 0xc6, 0x3a, 0xad, 0x15, 0x36, 0x37, 0x6d, 0xdd, 0x21, 0x38,
	0xc0, 0x2f, 0x30, 0x89, 0xb4, 0xe0, 0x46, 0x94, 0x8d, 0x97, 0x8d, 0x0e, 0x5c, 0xc1, 0xb7, 0xbc,
	0x30, 0xdb, 0xe9, 0xc4, 0x89, 0x32, 0xb3, 0x2b, 0xbf, 0xfe, 0x0c, 0x17, 0xb1, 0xca, 0xc3, 0x24,
	0x33, 0x3a, 0x33, 0x61, 0xca, 0x65, 0xc2, 0x57, 0xbf, 0xc3, 0x47, 0xfe, 0x87, 0x53, 0xc5, 0xf5,
	0xa4, 0xf9, 0x02, 0x16, 0xf6, 0xaf, 0xb0, 0xe8, 0xfc, 0xea, 0xd1, 0xef, 0xe1, 0xe3, 0x73, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xca, 0xe9, 0x3a, 0xd4, 0x4f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConnectorCommandClient is the client API for ConnectorCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectorCommandClient interface {
	SendCommandMessage(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandMessageUUID, error)
	WaitCommandMessage(ctx context.Context, in *CommandMessageWait, opts ...grpc.CallOption) (*CommandMessage, error)
	CreateIteratorCommand(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IteratorMessage, error)
}

type connectorCommandClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorCommandClient(cc grpc.ClientConnInterface) ConnectorCommandClient {
	return &connectorCommandClient{cc}
}

func (c *connectorCommandClient) SendCommandMessage(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandMessageUUID, error) {
	out := new(CommandMessageUUID)
	err := c.cc.Invoke(ctx, "/grpc.ConnectorCommand/SendCommandMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorCommandClient) WaitCommandMessage(ctx context.Context, in *CommandMessageWait, opts ...grpc.CallOption) (*CommandMessage, error) {
	out := new(CommandMessage)
	err := c.cc.Invoke(ctx, "/grpc.ConnectorCommand/WaitCommandMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorCommandClient) CreateIteratorCommand(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IteratorMessage, error) {
	out := new(IteratorMessage)
	err := c.cc.Invoke(ctx, "/grpc.ConnectorCommand/CreateIteratorCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorCommandServer is the server API for ConnectorCommand service.
type ConnectorCommandServer interface {
	SendCommandMessage(context.Context, *CommandMessage) (*CommandMessageUUID, error)
	WaitCommandMessage(context.Context, *CommandMessageWait) (*CommandMessage, error)
	CreateIteratorCommand(context.Context, *Empty) (*IteratorMessage, error)
}

// UnimplementedConnectorCommandServer can be embedded to have forward compatible implementations.
type UnimplementedConnectorCommandServer struct {
}

func (*UnimplementedConnectorCommandServer) SendCommandMessage(ctx context.Context, req *CommandMessage) (*CommandMessageUUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandMessage not implemented")
}
func (*UnimplementedConnectorCommandServer) WaitCommandMessage(ctx context.Context, req *CommandMessageWait) (*CommandMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitCommandMessage not implemented")
}
func (*UnimplementedConnectorCommandServer) CreateIteratorCommand(ctx context.Context, req *Empty) (*IteratorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIteratorCommand not implemented")
}

func RegisterConnectorCommandServer(s *grpc.Server, srv ConnectorCommandServer) {
	s.RegisterService(&_ConnectorCommand_serviceDesc, srv)
}

func _ConnectorCommand_SendCommandMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).SendCommandMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnectorCommand/SendCommandMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).SendCommandMessage(ctx, req.(*CommandMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorCommand_WaitCommandMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessageWait)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).WaitCommandMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnectorCommand/WaitCommandMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).WaitCommandMessage(ctx, req.(*CommandMessageWait))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorCommand_CreateIteratorCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).CreateIteratorCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnectorCommand/CreateIteratorCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).CreateIteratorCommand(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectorCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ConnectorCommand",
	HandlerType: (*ConnectorCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommandMessage",
			Handler:    _ConnectorCommand_SendCommandMessage_Handler,
		},
		{
			MethodName: "WaitCommandMessage",
			Handler:    _ConnectorCommand_WaitCommandMessage_Handler,
		},
		{
			MethodName: "CreateIteratorCommand",
			Handler:    _ConnectorCommand_CreateIteratorCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectorCommand.proto",
}
