// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectorCommand.proto

/*
Package connector is a generated protocol buffer package.

It is generated from these files:
	connectorCommand.proto

It has these top-level messages:
	CommandMessage
	CommandMessageRequest
	CommandMessageUUID
	CommandMessageReply
	Empty
*/
package connector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandMessage struct {
	Target  string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Command string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Payload string `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (m *CommandMessage) Reset()                    { *m = CommandMessage{} }
func (m *CommandMessage) String() string            { return proto.CompactTextString(m) }
func (*CommandMessage) ProtoMessage()               {}
func (*CommandMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommandMessage) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *CommandMessage) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandMessage) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type CommandMessageRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *CommandMessageRequest) Reset()                    { *m = CommandMessageRequest{} }
func (m *CommandMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandMessageRequest) ProtoMessage()               {}
func (*CommandMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandMessageRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type CommandMessageUUID struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *CommandMessageUUID) Reset()                    { *m = CommandMessageUUID{} }
func (m *CommandMessageUUID) String() string            { return proto.CompactTextString(m) }
func (*CommandMessageUUID) ProtoMessage()               {}
func (*CommandMessageUUID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommandMessageUUID) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type CommandMessageReply struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	State   string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Payload string `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (m *CommandMessageReply) Reset()                    { *m = CommandMessageReply{} }
func (m *CommandMessageReply) String() string            { return proto.CompactTextString(m) }
func (*CommandMessageReply) ProtoMessage()               {}
func (*CommandMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommandMessageReply) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *CommandMessageReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CommandMessageReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*CommandMessage)(nil), "connector.CommandMessage")
	proto.RegisterType((*CommandMessageRequest)(nil), "connector.CommandMessageRequest")
	proto.RegisterType((*CommandMessageUUID)(nil), "connector.CommandMessageUUID")
	proto.RegisterType((*CommandMessageReply)(nil), "connector.CommandMessageReply")
	proto.RegisterType((*Empty)(nil), "connector.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConnectorCommand service

type ConnectorCommandClient interface {
	// Sends a greeting
	SendCommandMessage(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandMessageUUID, error)
	SendCommandMessageReply(ctx context.Context, in *CommandMessageReply, opts ...grpc.CallOption) (*Empty, error)
	WaitCommandMessage(ctx context.Context, in *CommandMessageRequest, opts ...grpc.CallOption) (*CommandMessage, error)
	WaitCommandMessageReply(ctx context.Context, in *CommandMessageUUID, opts ...grpc.CallOption) (*CommandMessageReply, error)
}

type connectorCommandClient struct {
	cc *grpc.ClientConn
}

func NewConnectorCommandClient(cc *grpc.ClientConn) ConnectorCommandClient {
	return &connectorCommandClient{cc}
}

func (c *connectorCommandClient) SendCommandMessage(ctx context.Context, in *CommandMessage, opts ...grpc.CallOption) (*CommandMessageUUID, error) {
	out := new(CommandMessageUUID)
	err := grpc.Invoke(ctx, "/connector.ConnectorCommand/SendCommandMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorCommandClient) SendCommandMessageReply(ctx context.Context, in *CommandMessageReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/connector.ConnectorCommand/SendCommandMessageReply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorCommandClient) WaitCommandMessage(ctx context.Context, in *CommandMessageRequest, opts ...grpc.CallOption) (*CommandMessage, error) {
	out := new(CommandMessage)
	err := grpc.Invoke(ctx, "/connector.ConnectorCommand/WaitCommandMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorCommandClient) WaitCommandMessageReply(ctx context.Context, in *CommandMessageUUID, opts ...grpc.CallOption) (*CommandMessageReply, error) {
	out := new(CommandMessageReply)
	err := grpc.Invoke(ctx, "/connector.ConnectorCommand/WaitCommandMessageReply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConnectorCommand service

type ConnectorCommandServer interface {
	// Sends a greeting
	SendCommandMessage(context.Context, *CommandMessage) (*CommandMessageUUID, error)
	SendCommandMessageReply(context.Context, *CommandMessageReply) (*Empty, error)
	WaitCommandMessage(context.Context, *CommandMessageRequest) (*CommandMessage, error)
	WaitCommandMessageReply(context.Context, *CommandMessageUUID) (*CommandMessageReply, error)
}

func RegisterConnectorCommandServer(s *grpc.Server, srv ConnectorCommandServer) {
	s.RegisterService(&_ConnectorCommand_serviceDesc, srv)
}

func _ConnectorCommand_SendCommandMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).SendCommandMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.ConnectorCommand/SendCommandMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).SendCommandMessage(ctx, req.(*CommandMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorCommand_SendCommandMessageReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessageReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).SendCommandMessageReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.ConnectorCommand/SendCommandMessageReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).SendCommandMessageReply(ctx, req.(*CommandMessageReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorCommand_WaitCommandMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).WaitCommandMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.ConnectorCommand/WaitCommandMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).WaitCommandMessage(ctx, req.(*CommandMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorCommand_WaitCommandMessageReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessageUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorCommandServer).WaitCommandMessageReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.ConnectorCommand/WaitCommandMessageReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorCommandServer).WaitCommandMessageReply(ctx, req.(*CommandMessageUUID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectorCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connector.ConnectorCommand",
	HandlerType: (*ConnectorCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommandMessage",
			Handler:    _ConnectorCommand_SendCommandMessage_Handler,
		},
		{
			MethodName: "SendCommandMessageReply",
			Handler:    _ConnectorCommand_SendCommandMessageReply_Handler,
		},
		{
			MethodName: "WaitCommandMessage",
			Handler:    _ConnectorCommand_WaitCommandMessage_Handler,
		},
		{
			MethodName: "WaitCommandMessageReply",
			Handler:    _ConnectorCommand_WaitCommandMessageReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectorCommand.proto",
}

func init() { proto.RegisterFile("connectorCommand.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0xbb, 0x40,
	0x10, 0xc6, 0xa1, 0xff, 0x7f, 0xdb, 0x74, 0x0e, 0x4d, 0x33, 0x6a, 0x8b, 0x24, 0x9a, 0x66, 0x4f,
	0x3d, 0x6d, 0xa2, 0xbe, 0x41, 0xab, 0x07, 0x0f, 0x4d, 0x48, 0x9b, 0xc6, 0x68, 0xbc, 0xac, 0xb0,
	0x21, 0x24, 0xc0, 0xae, 0xb0, 0x24, 0xf2, 0xbe, 0x3e, 0x88, 0x61, 0xa1, 0x28, 0x54, 0xf0, 0xc6,
	0xf0, 0x9b, 0xf9, 0xf2, 0x7d, 0xb3, 0x03, 0x73, 0x57, 0xc4, 0x31, 0x77, 0x95, 0x48, 0x36, 0x22,
	0x8a, 0x58, 0xec, 0x51, 0x99, 0x08, 0x25, 0x70, 0x52, 0xff, 0x27, 0xaf, 0x30, 0xad, 0xd8, 0x96,
	0xa7, 0x29, 0xf3, 0x39, 0xce, 0x61, 0xa4, 0x58, 0xe2, 0x73, 0x65, 0x99, 0x4b, 0x73, 0x35, 0xd9,
	0x55, 0x15, 0x5a, 0x30, 0x76, 0xcb, 0x4e, 0x6b, 0xa0, 0xc1, 0xb1, 0x2c, 0x88, 0x64, 0x79, 0x28,
	0x98, 0x67, 0xfd, 0x2b, 0x49, 0x55, 0x92, 0x1b, 0xb8, 0x68, 0xaa, 0xef, 0xf8, 0x7b, 0xc6, 0xd3,
	0x86, 0x98, 0xd9, 0x10, 0x23, 0x2b, 0xc0, 0xe6, 0xc8, 0xe1, 0xf0, 0x78, 0x8f, 0x08, 0xff, 0xb3,
	0x2c, 0x38, 0x36, 0xeb, 0x6f, 0xf2, 0x0c, 0x67, 0x6d, 0x71, 0x19, 0xe6, 0xbf, 0xb5, 0xe2, 0x39,
	0x0c, 0x53, 0xc5, 0x14, 0xaf, 0x9c, 0x97, 0x45, 0x8f, 0xef, 0x31, 0x0c, 0x1f, 0x22, 0xa9, 0xf2,
	0xdb, 0xcf, 0x01, 0xcc, 0x36, 0xad, 0x25, 0xa2, 0x03, 0xb8, 0xe7, 0xb1, 0xd7, 0xda, 0xdb, 0x25,
	0xad, 0xb7, 0x4a, 0x9b, 0xc8, 0xbe, 0xea, 0x44, 0x45, 0x38, 0x62, 0xe0, 0x16, 0x16, 0xa7, 0x8a,
	0x65, 0x9c, 0xeb, 0xce, 0x59, 0xcd, 0xed, 0xd9, 0x0f, 0xae, 0x3d, 0x13, 0x03, 0xf7, 0x80, 0x4f,
	0x2c, 0x50, 0x2d, 0x83, 0xcb, 0x1e, 0x25, 0xfd, 0x2a, 0x76, 0x77, 0x04, 0x62, 0xe0, 0x0b, 0x2c,
	0x4e, 0x45, 0x4b, 0x8f, 0xfd, 0xf9, 0xec, 0x3f, 0x22, 0x10, 0x63, 0x4d, 0xc1, 0x0e, 0x04, 0xf5,
	0x13, 0xe9, 0x52, 0xfe, 0xc1, 0x22, 0x19, 0xf2, 0xf4, 0x7b, 0x66, 0x3d, 0xad, 0x5f, 0xc0, 0x29,
	0xce, 0xd7, 0x31, 0xdf, 0x46, 0xfa, 0x8e, 0xef, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xd2,
	0x5c, 0x15, 0xe1, 0x02, 0x00, 0x00,
}
