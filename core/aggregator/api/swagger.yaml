openapi: 3.0.0
info:
  title: Swagger Gandalf
  description: "This is a sample Petstore server.  You can find \nout more about Swagger\
    \ at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  termsOfService: http://swagger.io/terms/
  contact:
    email: romain.fairant@orness.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-oas3
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:role
- url: https://virtserver.swaggerhub.com/ditrit/Gandalf/1.0.0
- url: http://virtserver.swaggerhub.com/ditrit/Gandalf/1.0.0
tags:
- name: role
  description: Everything about your Roles
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: domain
  description: Everything about your Domains
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: resource
  description: Everything about your Resources
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: resourceType
  description: Everything about your ResourceTypes
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: eventTypeToPoll
  description: Everything about your EventTypeToPolls
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: eventType
  description: Everything about your EventTypes
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: user
  description: Operations about User
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: tenant
  description: Operations about Tenant
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: secretAssignement
  description: Operations about Secret
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: logicalComponent
  description: Operations about Logical Component
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /role:
    get:
      tags:
      - role
      summary: List roles
      operationId: listRole
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - role
      summary: Create a role
      operationId: createRole
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateRole'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /role/{roleId}:
    get:
      tags:
      - role
      summary: Find role by ID
      description: Returns a single role
      operationId: getRoleById
      parameters:
      - name: roleId
        in: path
        description: ID of role to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        "400":
          description: Invalid ID supplied
        "404":
          description: Role not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - role
      summary: Updates a role
      operationId: updateRole
      parameters:
      - name: roleId
        in: path
        description: ID of role that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateRole'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - role
      summary: Deletes a role
      operationId: deleteRole
      parameters:
      - name: roleId
        in: path
        description: Role id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succes
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /domain:
    get:
      tags:
      - domain
      summary: List domains
      operationId: listDomain
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_1'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /domain/{domainId}:
    get:
      tags:
      - domain
      summary: Find domain by ID
      description: Returns a single domain
      operationId: getDomainById
      parameters:
      - name: domainId
        in: path
        description: ID of domain to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        "400":
          description: Invalid ID supplied
        "404":
          description: Domain not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - domain
      summary: Updates a domain
      operationId: updateDomain
      parameters:
      - name: domainId
        in: path
        description: ID of domain that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateDomain'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - domain
      summary: Deletes a domain
      operationId: deleteDomain
      parameters:
      - name: domainId
        in: path
        description: Domain id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succes
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /domain/{domainName}:
    get:
      tags:
      - domain
      summary: Find domain by Name
      description: Returns a single Domain
      operationId: getDomainByName
      parameters:
      - name: domainName
        in: path
        description: Name of domain to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        "404":
          description: Domain not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - domain
      summary: Create a domain
      operationId: createDomain
      parameters:
      - name: domainName
        in: path
        description: Name of parent domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateDomain'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /tenant:
    get:
      tags:
      - tenant
      summary: List tenants
      operationId: listTenant
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_2'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - tenant
      summary: Create a tenant
      operationId: createTenant
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateTenant'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /tenant/{tenantId}:
    get:
      tags:
      - tenant
      summary: Find tenant by ID
      description: Returns a single tenant
      operationId: getTenantById
      parameters:
      - name: tenantId
        in: path
        description: ID of tenant to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        "400":
          description: Invalid ID supplied
        "404":
          description: Tenant not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - tenant
      summary: Updates a tenant
      operationId: updateTenant
      parameters:
      - name: tenantId
        in: path
        description: ID of tenant that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateTenant'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - tenant
      summary: Deletes a tenant
      operationId: deleteTenant
      parameters:
      - name: tenantId
        in: path
        description: Tenant id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succes
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /secretAssignement:
    get:
      tags:
      - secretAssignement
      summary: List SecretAssignements
      operationId: listSecretAssignement
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_3'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - secretAssignement
      summary: Create a SecretAssignement
      operationId: createSecretAssignement
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretAssignement'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /logicalcomponent/{logicalComponentName}:
    get:
      tags:
      - logicalComponent
      summary: Find domain by Name
      description: Returns a single logical component
      operationId: getLogicalComponentByName
      parameters:
      - name: logicalComponentName
        in: path
        description: Name of logical component to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalComponent'
        "400":
          description: Invalid ID supplied
        "404":
          description: Logical component not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /logicalcomponent/upload/{tenantName}/{typeName}:
    post:
      tags:
      - logicalComponent
      summary: Find domain by Name
      description: Returns a single logical component
      operationId: uploadLogicalComponentByTenantAndType
      parameters:
      - name: tenantName
        in: path
        description: Name of tenant
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: typeName
        in: path
        description: Name of type (aggregator/connector)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/tenantName_typeName_body'
      responses:
        "200":
          description: Successfully Uploaded File
        "500":
          description: Database error | Tenant not found | Pivot not found | ProductConnector
            not found
      security:
      - bearerAuth: []
  /resource:
    get:
      tags:
      - resource
      summary: List resources
      operationId: listResource
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_4'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - resource
      summary: Create a resource
      operationId: createResource
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateResource'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /resource/{resourceId}:
    get:
      tags:
      - resource
      summary: Find resource by ID
      description: Returns a single resource
      operationId: getResourceById
      parameters:
      - name: resourceId
        in: path
        description: ID of role to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid ID supplied
        "404":
          description: Resource not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - resource
      summary: Updates a resource
      operationId: updateResource
      parameters:
      - name: resourceId
        in: path
        description: ID of resource that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateResource'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - resource
      summary: Deletes a resource
      operationId: deleteResource
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /resource/{resourceName}:
    get:
      tags:
      - resource
      summary: Find resource by Name
      description: Returns a single Resource
      operationId: getResourceByName
      parameters:
      - name: resourceName
        in: path
        description: Name of resource to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "404":
          description: Resource not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /resourceType:
    get:
      tags:
      - resourceType
      summary: List resourceTypes
      operationId: listResourceType
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_5'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - resourceType
      summary: Create a resourcetype
      operationId: createResourceType
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateResourceType'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /resourceType/{resourceTypeId}:
    get:
      tags:
      - resourceType
      summary: Find resourceType by ID
      description: Returns a single resourceType
      operationId: getResourceTypeById
      parameters:
      - name: resourceTypeId
        in: path
        description: ID of role to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        "400":
          description: Invalid ID supplied
        "404":
          description: ResourceType not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - resourceType
      summary: Updates a resourcetype
      operationId: updateResourceType
      parameters:
      - name: resourceTypeId
        in: path
        description: ID of resourcetype that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateResourceType'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - resourceType
      summary: Deletes a resourceType
      operationId: deleteResourceType
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: resourceTypeId
        in: path
        description: ResourceType id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /resourceType/{resourceTypeName}:
    get:
      tags:
      - resourceType
      summary: Find resourceType by Name
      description: Returns a single ResourceType
      operationId: getResourceTypeByName
      parameters:
      - name: resourceTypeName
        in: path
        description: Name of resourceType to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        "404":
          description: ResourceType not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /eventTypeToPoll:
    get:
      tags:
      - eventTypeToPoll
      summary: List eventTypeToPolls
      operationId: listEventTypeToPoll
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_6'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - eventTypeToPoll
      summary: Create a eventTypeToPoll
      operationId: createEventTypeToPoll
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateEventTypeToPoll'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeToPoll'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /eventTypeToPoll/{eventTypeToPollId}:
    get:
      tags:
      - eventTypeToPoll
      summary: Find eventTypeToPoll by ID
      description: Returns a single eventTypeToPoll
      operationId: getEventTypeToPollById
      parameters:
      - name: eventTypeToPollId
        in: path
        description: ID of eventTypeToPoll to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeToPoll'
        "400":
          description: Invalid ID supplied
        "404":
          description: EventTypeToPoll not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - eventTypeToPoll
      summary: Updates a eventTypeToPoll
      operationId: updateEventTypeToPoll
      parameters:
      - name: eventTypeToPollId
        in: path
        description: ID of eventTypeToPoll that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateEventTypeToPoll'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeToPoll'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - eventTypeToPoll
      summary: Deletes a eventTypeToPoll
      operationId: deleteEventTypeToPoll
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: eventTypeToPollId
        in: path
        description: EventTypeToPoll id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /eventType:
    get:
      tags:
      - eventType
      summary: List eventTypes
      operationId: listEventType
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_7'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - eventType
      summary: Create a eventType
      operationId: createEventType
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateEventType'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /eventType/{eventTypeId}:
    get:
      tags:
      - eventType
      summary: Find eventType by ID
      description: Returns a single eventType
      operationId: getEventTypeById
      parameters:
      - name: eventTypeId
        in: path
        description: ID of role to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        "400":
          description: Invalid ID supplied
        "404":
          description: EventType not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - eventType
      summary: Updates a eventType
      operationId: updateEventType
      parameters:
      - name: eventTypeId
        in: path
        description: ID of eventType that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateEventType'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - eventType
      summary: Deletes a eventType
      operationId: deleteEventType
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: eventTypeId
        in: path
        description: EventType id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /eventType/{eventTypeName}:
    get:
      tags:
      - eventType
      summary: Find eventType by Name
      description: Returns a single EventType
      operationId: getEventTypeByName
      parameters:
      - name: eventTypeName
        in: path
        description: Name of eventType to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        "404":
          description: EventType not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /user:
    get:
      tags:
      - user
      summary: List users
      operationId: listUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_8'
                x-content-type: application/json
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    post:
      tags:
      - user
      summary: Create a user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateUser'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /user/{userId}:
    get:
      tags:
      - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    put:
      tags:
      - user
      summary: Updates a role
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: ID of role that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/createOrUpdateUser'
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID supplied | Invalid request payload
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
    delete:
      tags:
      - user
      summary: Deletes a role
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: Role id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Succes
        "400":
          description: Invalid ID supplied
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /user/{userName}:
    get:
      tags:
      - user
      summary: Find user by Name
      description: Returns a single User
      operationId: getUserByName
      parameters:
      - name: userName
        in: path
        description: Name of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
        "500":
          description: Database error | Tenant not found
      security:
      - bearerAuth: []
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/loginUser'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Invalid request payload
        "401":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
components:
  schemas:
    Model:
      type: object
      properties:
        id:
          type: integer
          description: The ID.
        createdAt:
          type: string
          description: The created date.
          format: date-time
        updatedAt:
          type: string
          description: The updated date.
          format: date-time
        deletedAt:
          type: string
          description: The deleted date.
          format: date-time
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        id: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
    User:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The user name.
        email:
          type: string
          description: The user email.
        password:
          type: string
          description: The user password.
      example:
        password: password
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
        email: email
    Role:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The role name.
      example:
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
    Domain:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The domain name.
      example:
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
    Resource:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The resource name.
        logicalComponentId:
          type: integer
          description: The logical component id.
        domainId:
          type: integer
          description: The domain id.
        resourceTypeId:
          type: integer
          description: The resourceType id.
      example:
        resourceTypeId: 7
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
        logicalComponentId: 5
        domainId: 2
    ResourceType:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The resourceType name.
        pivotId:
          type: integer
          description: The pivot id.
        productConnectorId:
          type: integer
          description: The productConnector id.
      example:
        productConnectorId: 6
        pivotId: 0
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
    EventType:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The eventType name.
        schema:
          type: string
        pivotId:
          type: integer
          description: The pivot id.
        productConnectorId:
          type: integer
          description: The productConnector id.
      example:
        schema: schema
        productConnectorId: 6
        pivotId: 0
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
    EventTypeToPoll:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The eventTypeToPoll name.
        resourceId:
          type: integer
          description: The resource id.
        eventTypeId:
          type: integer
          description: The eventType id.
      example:
        resourceId: 0
        eventTypeId: 6
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
    Tenant:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Model'
        name:
          type: string
          description: The tenant name.
        password:
          type: string
          description: The tenant password.
      example:
        password: password
        name: name
        model:
          createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
    SecretAssignement:
      type: object
      properties:
        secret:
          type: string
          description: The secret.
        addressIP:
          type: string
          description: The secret IP Address.
      example:
        secret: secret
        addressIP: addressIP
    LogicalComponent:
      type: object
      properties:
        logicalName:
          type: string
          description: The logical name.
        type:
          type: string
          description: The type of logical component.
        pivotID:
          type: integer
          description: The ID of pivot.
        productConnectorID:
          type: integer
          description: The ID of product connector.
        aggregator:
          type: string
          description: The aggregator.
        keyValues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalComponent_keyValues'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_4'
      example:
        productConnectorID: 6
        pivotID: 0
        aggregator: aggregator
        logicalName: logicalName
        resources:
        - schema:
            resourceTypeId: 7
            name: name
            model:
              createdAt: 2000-01-23T04:56:07.000+00:00
              deletedAt: 2000-01-23T04:56:07.000+00:00
              id: 0
              updatedAt: 2000-01-23T04:56:07.000+00:00
            logicalComponentId: 5
            domainId: 2
        - schema:
            resourceTypeId: 7
            name: name
            model:
              createdAt: 2000-01-23T04:56:07.000+00:00
              deletedAt: 2000-01-23T04:56:07.000+00:00
              id: 0
              updatedAt: 2000-01-23T04:56:07.000+00:00
            logicalComponentId: 5
            domainId: 2
        type: type
        keyValues:
        - schema:
            keyID: 1
            addressIP: addressIP
            logicalComponentID: 5
            value: value
        - schema:
            keyID: 1
            addressIP: addressIP
            logicalComponentID: 5
            value: value
    KeyValue:
      type: object
      properties:
        value:
          type: string
          description: The secret.
        addressIP:
          type: string
          description: The secret IP Address.
        keyID:
          type: integer
          description: The ID of key.
        logicalComponentID:
          type: integer
          description: The ID of logicalComponent.
      example:
        keyID: 1
        addressIP: addressIP
        logicalComponentID: 5
        value: value
    inline_response_200:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Role'
      example:
        schema:
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
    inline_response_200_1:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Domain'
      example:
        schema:
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
    inline_response_200_2:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Tenant'
      example:
        schema:
          password: password
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
    inline_response_200_3:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/SecretAssignement'
      example:
        schema:
          secret: secret
          addressIP: addressIP
    tenantName_typeName_body:
      type: object
      properties:
        fileName:
          type: string
          format: binary
    inline_response_200_4:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Resource'
      example:
        schema:
          resourceTypeId: 7
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
          logicalComponentId: 5
          domainId: 2
    inline_response_200_5:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/ResourceType'
      example:
        schema:
          productConnectorId: 6
          pivotId: 0
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
    inline_response_200_6:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/EventTypeToPoll'
      example:
        schema:
          resourceId: 0
          eventTypeId: 6
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
    inline_response_200_7:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/EventType'
      example:
        schema:
          schema: schema
          productConnectorId: 6
          pivotId: 0
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
    inline_response_200_8:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/User'
      example:
        schema:
          password: password
          name: name
          model:
            createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
          email: email
    LogicalComponent_keyValues:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/KeyValue'
      example:
        schema:
          keyID: 1
          addressIP: addressIP
          logicalComponentID: 5
          value: value
  responses:
    "500Error":
      description: Database error | Tenant not found
    "500UploadLogicalComponentError":
      description: Database error | Tenant not found | Pivot not found | ProductConnector
        not found
    "400Error":
      description: Invalid ID supplied | Invalid request payload
    InvalidRequestPayload:
      description: Invalid request payload
    InvalidIDSupplied:
      description: Invalid ID supplied
    UnauthorizedError:
      description: Access token is missing or invalid
  requestBodies:
    createOrUpdateRole:
      description: The role to create.
      content:
        application/json:
          schema:
            required:
            - name
            type: object
            properties:
              name:
                type: string
    createOrUpdateDomain:
      description: The domain to create.
      content:
        application/json:
          schema:
            required:
            - name
            type: object
            properties:
              name:
                type: string
    createOrUpdateTenant:
      description: The tenant to create.
      content:
        application/json:
          schema:
            required:
            - name
            type: object
            properties:
              name:
                type: string
    createOrUpdateResource:
      description: The resource to create.
      content:
        application/json:
          schema:
            required:
            - domainID
            - logicalComponentID
            - name
            - resourceTypeID
            type: object
            properties:
              name:
                type: string
              logicalComponentID:
                type: integer
              domainID:
                type: integer
              resourceTypeID:
                type: integer
    createOrUpdateResourceType:
      description: The resourceType to create.
      content:
        application/json:
          schema:
            required:
            - name
            - pivotID
            - productConnectorID
            type: object
            properties:
              name:
                type: string
              pivotID:
                type: integer
              productConnectorID:
                type: integer
    createOrUpdateEventType:
      description: The eventType to create.
      content:
        application/json:
          schema:
            required:
            - name
            - pivotID
            - productConnectorID
            - schema
            type: object
            properties:
              name:
                type: string
              schema:
                type: string
              pivotID:
                type: integer
              productConnectorID:
                type: integer
    createOrUpdateEventTypeToPoll:
      description: The eventTypeToPoll to create.
      content:
        application/json:
          schema:
            required:
            - eventTypeID
            - resourceID
            type: object
            properties:
              resourceID:
                type: integer
              eventTypeID:
                type: integer
    createOrUpdateUser:
      description: The user to create.
      content:
        application/json:
          schema:
            required:
            - email
            - name
            - password
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
    loginUser:
      description: The user to create.
      content:
        application/json:
          schema:
            required:
            - email
            - password
            type: object
            properties:
              email:
                type: string
              password:
                type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
