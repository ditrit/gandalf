/*
 * Swagger Gandalf
 *
 * This is a sample Petstore server.  You can find  out more about Swagger at  [http://swagger.io](http://swagger.io) or on  [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * API version: 1.0.0-oas3
 * Contact: romain.fairant@orness.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package api

import (
	"database/sql"
	"encoding/json"
	"net/http"

	"github.com/ditrit/gandalf/core/aggregator/api/dao"
	"github.com/ditrit/gandalf/core/models"
	"github.com/google/uuid"

	"github.com/ditrit/gandalf/core/aggregator/api/utils"
	"github.com/gorilla/mux"
)

const TENANT_NOT_FOUND = "tenant not found"

func CreateProduct(w http.ResponseWriter, r *http.Request) {
	var err error
	database := utils.DatabaseConnection.GetTenantDatabaseClient()
	if database == nil {
		utils.RespondWithError(w, http.StatusInternalServerError, TENANT_NOT_FOUND)
		return
	}

		var product *models.Product
		decoder := json.NewDecoder(r.Body)
		if err := decoder.Decode(&product); err != nil {
			utils.RespondWithError(w, http.StatusBadRequest, "Invalid request payload")
			return
		}
		defer r.Body.Close()

		var parentDomain models.Domain
		if parentDomain, err = dao.ReadDomain(database, product.DomainID); err != nil {
			if err == sql.ErrNoRows {
				utils.RespondWithError(w, http.StatusNotFound, "Domain not found")
			} else {
				utils.RespondWithError(w, http.StatusInternalServerError, err.Error())
			}
			return
		}
		product.Domain = &parentDomain

		if err := dao.CreateProduct(database, product, product.DomainID); err != nil {
			utils.RespondWithError(w, http.StatusInternalServerError, err.Error())
			return
		}


		product.GitServerURL = parentDomain.GitServerURL
		product.GitPersonalAccessToken = parentDomain.GitPersonalAccessToken
		product.GitOrganization = parentDomain.GitOrganization

		product.Authorizations = parentDomain.Authorizations
		product.Libraries = parentDomain.Libraries
		product.Tags = parentDomain.Tags
		product.Environments = parentDomain.Environments

		utils.RespondWithJSON(w, http.StatusCreated, product)
	
}

func DeleteProduct(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	database := utils.DatabaseConnection.GetTenantDatabaseClient()
	if database == nil {
utils.RespondWithError(w, http.StatusInternalServerError, TENANT_NOT_FOUND)
		return
	}
		id, err := uuid.Parse(vars["productId"])
		if err != nil {
			utils.RespondWithError(w, http.StatusBadRequest, "Invalid Product ID")
			return
		}

		if err := dao.DeleteProduct(database, id); err != nil {
			utils.RespondWithError(w, http.StatusInternalServerError, err.Error())
			return
		}

		utils.RespondWithJSON(w, http.StatusOK, map[string]string{"result": "success"})
	
}

func GetProductById(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	database := utils.DatabaseConnection.GetTenantDatabaseClient()
	if database == nil {
utils.RespondWithError(w, http.StatusInternalServerError, TENANT_NOT_FOUND)
		return
	}
		id, err := uuid.Parse(vars["productId"])
		if err != nil {
			utils.RespondWithError(w, http.StatusBadRequest, "Invalid ID supplied")
			return
		}

		var product models.Product
		if product, err = dao.ReadProduct(database, id); err != nil {
			if err == sql.ErrNoRows {
				utils.RespondWithError(w, http.StatusNotFound, "User not found")
			} else {
				utils.RespondWithError(w, http.StatusInternalServerError, err.Error())
			}
			return
		}

		utils.RespondWithJSON(w, http.StatusOK, product)
	
}

func ListProduct(w http.ResponseWriter, r *http.Request) {

	database := utils.DatabaseConnection.GetTenantDatabaseClient()
	if database == nil {
utils.RespondWithError(w, http.StatusInternalServerError, TENANT_NOT_FOUND)
		return
	}
		products, err := dao.ListProduct(database)
		if err != nil {
			utils.RespondWithError(w, http.StatusInternalServerError, err.Error())
			return
		}

		utils.RespondWithJSON(w, http.StatusOK, products)
	
}

func UpdateProduct(w http.ResponseWriter, r *http.Request) {
	//TODO : verify if we need to update if fields are nil
	vars := mux.Vars(r)
	database := utils.DatabaseConnection.GetTenantDatabaseClient()
	if database == nil {
utils.RespondWithError(w, http.StatusInternalServerError, TENANT_NOT_FOUND)
		return
	}
		id, err := uuid.Parse(vars["productId"])
		if err != nil {
			utils.RespondWithError(w, http.StatusBadRequest, "Invalid ID supplied")
			return
		}

		var product models.Product
		decoder := json.NewDecoder(r.Body)
		if err := decoder.Decode(&product); err != nil {
			utils.RespondWithError(w, http.StatusBadRequest, "Invalid resquest payload")
			return
		}
		defer r.Body.Close()
		product.ID = id

		if err := dao.UpdateProduct(database, product); err != nil {
			utils.RespondWithError(w, http.StatusInternalServerError, err.Error())
			return
		}

		utils.RespondWithJSON(w, http.StatusOK, product)
	
}
